{"version":3,"file":"styles.min.css","mappings":"AAWA;;;;CAAA,CCVA,oEAEA,kBACI,kBACA,sBACA,4BACA,2BAEA,8CACE,mFAGF,gDACE,mGAGF,2CACE,kBACA,MACA,SACA,OACA,WACA,YACA,gCAGF,4BACE,kBACA,oEACA,uEAEA,gDACE,cACA,iBC6BJ,yBDpCA,4BAWI,4EACA,gFCwBJ,yBDpCA,4BAgBM,4EACA,gFAGJ,+BACE,mBAIA,6CACE,eACA,iBACA,gBCQN,yBDXI,6CAMI,eACA,kBAMN,6DACE,gBAIA,4DACE,eACA,iBACA,gBACA,yBACA,YACA,eACA,kBACA,iCACA,wBAEA,wEACE,4DCnBR,yBDOI,4DAgBI,iBACA,YACA,gBAGF,wEACE,sEACA,sEAEA,8EACE,8DACA,4CACA,wCAIJ,8EACE,8DACA,4EAEA,oFACE,iCACA,oFACA,4EAMR,wCACE,iCAEA,kQACE,iCAKE,0FACE,wCACA,iCAEA,gGACE,4EAOV,sCACE,+BAGE,sEASE,+BARA,kFACE,iCAEA,wFACE,6C","sources":["webpack://app-cta/./bs5/styles/bs5.scss","webpack://app-cta/./bs5/styles/_style.scss","webpack://app-cta/./node_modules/bs5/scss/mixins/_breakpoints.scss"],"sourcesContent":["// ** Information in case you're new to this**\r\n// This is an SCSS file. \r\n// It generates the css file using Bootstrap4 standards.\r\n// To regenerate the SCSS using your variables (custom colors, etc.)\r\n// you can update the reference to your _variables.scss of your skin\r\n// please read the readme.md in this folder.\r\n\r\n\r\n// ** Add header-comments to the final file **\r\n// The following comment will be included in the final CSS\r\n// which helps users understand where it comes from\r\n/*!\r\n * This file was auto-generated using SASS\r\n * You can manually modify it - but usually you will want to \r\n * Re-generate it using the SASS variables of your theme\r\n*/\r\n\r\n// Include needed functions and mixins from Bootstrap 4\r\n@import \"../../node_modules/bs5/scss/_functions\";\r\n\r\n// Include needed variables and mixins from Bootstrap 4\r\n// You must adapt these paths to match your Bootstrap 4 skin\r\n// @import \"../../../_default/Skins/2sxcBootstrap-B4/src/scss/_variables.scss\";\r\n// @import \"../../../_default/Skins/2sxcBootstrap-B4/node_modules/bootstrap/scss/mixins/_breakpoints.scss\";\r\n\r\n// @import \"_variables.scss\";\r\n@import \"../../node_modules/bs5/scss/mixins/_breakpoints.scss\";\r\n@import \"../../node_modules/bs5/scss/variables\";\r\n\r\n\r\n// Now parse the News5 CSS Rules\r\n@import \"_style.scss\";","\r\n#dnn_HeaderPane .app-cta3-wrapper > .row { margin-left: 0; margin-right: 0; }\r\n\r\n.app-cta3-wrapper {\r\n    position: relative;\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n  \r\n    &.app-cta3-background-primary {\r\n      background: rgba(#000, 1.0) url('../../Images/bg-hexagon-darkblue.png') center center repeat fixed;\r\n    }\r\n  \r\n    &.app-cta3-background-lightgrey {\r\n      background: rgba(228,224,218,.4) url('../../Images/bg-hexagon.png') center center repeat fixed;\r\n    }\r\n  \r\n    .backgroundimage-overlay {\r\n      position: absolute;\r\n      top: 0;\r\n      bottom: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      background-color: rgba(#000, 0.3);\r\n    }\r\n  \r\n    .app-cta3 {\r\n      position: relative;\r\n      padding-top: var(--bs-gutter-x, var(--bs-gutter-x-fallback-app-cta));\r\n      padding-bottom: var(--bs-gutter-x, var(--bs-gutter-x-fallback-app-cta));\r\n\r\n      &.app-cta3-text-image {\r\n        padding-top: 0;\r\n        padding-bottom: 0;\r\n      }\r\n  \r\n      @include media-breakpoint-up(md) {\r\n        padding-top: calc(var(--bs-gutter-x, var(--bs-gutter-x-fallback-app-cta)) * 2);\r\n        padding-bottom: calc(var(--bs-gutter-x, var(--bs-gutter-x-fallback-app-cta)) * 2);\r\n      }\r\n      \r\n      @include media-breakpoint-up(lg) {\r\n          padding-top: calc(var(--bs-gutter-x, var(--bs-gutter-x-fallback-app-cta)) * 3);\r\n          padding-bottom: calc(var(--bs-gutter-x, var(--bs-gutter-x-fallback-app-cta)) * 3);\r\n      }\r\n  \r\n      h2 {\r\n        margin-bottom: 16px;\r\n      }\r\n  \r\n      .app-cta3-text {\r\n        p {\r\n          font-size: 20px;\r\n          line-height: 29px;\r\n          margin-bottom: 0;\r\n  \r\n          @include media-breakpoint-up(md) {\r\n            font-size: 30px;\r\n            line-height: 42px;\r\n          }\r\n          \r\n        }\r\n      }\r\n  \r\n      .app-cta3-text + .app-cta3-buttons {\r\n        margin-top: 16px;\r\n      }\r\n  \r\n      .app-cta3-buttons {\r\n        .app-cta3-btn {\r\n          font-size: 14px;\r\n          line-height: 40px;\r\n          font-weight: 700;\r\n          text-transform: uppercase;\r\n          height: 40px;\r\n          padding: 0 16px;\r\n          border-radius: 4px;\r\n          color: var(--app-cta-text-bright);\r\n          transition: all .2s ease;\r\n  \r\n          &:first-child {\r\n            box-shadow: 0 0 5px rgba(0, 0, 0, 0.25), 0 0 10px rgba(0, 0, 0, 0.22);\r\n          }\r\n  \r\n          @include media-breakpoint-up(md) {\r\n            line-height: 50px;\r\n            height: 50px;\r\n            padding: 0 32px;\r\n          }\r\n          \r\n          &:first-child {\r\n            background-color: var(--bs-primary, var(--bs-btn-bg-fallback-app-cta));\r\n            border-color: var(--bs-primary, var(--bs-btn-border-fallback-app-cta));\r\n  \r\n            &:hover {\r\n              color: var(--bs-primary, var(--bs-btn-color-fallback-app-cta));\r\n              background-color: var(--app-cta-text-bright);\r\n              border-color: var(--app-cta-text-bright);\r\n            }\r\n          }\r\n  \r\n          &:not(:first-child) {\r\n            color: var(--bs-secondary, var(--app-cta-btn-secondary-color));\r\n            border-color: var(--bs-secondary, var(--app-cta-btn-secondary-border-color));\r\n  \r\n            &:hover {\r\n              color: var(--app-cta-text-bright);\r\n              background-color: var(--bs-secondary, var(--app-cta-btn-secondary-background-color));\r\n              border-color: var(--bs-secondary, var(--app-cta-btn-secondary-border-color));\r\n            }\r\n          }\r\n        }\r\n      }\r\n  \r\n      &.text-bright {\r\n        color: var(--app-cta-text-bright);\r\n  \r\n        h1, h2, h3, h4, h5, h6 {\r\n          color: var(--app-cta-text-bright);\r\n        }\r\n  \r\n        .app-cta3-buttons {\r\n          .app-cta3-btn {\r\n            &:not(:first-child) {\r\n              border-color: var(--app-cta-text-bright);\r\n              color: var(--app-cta-text-bright);\r\n  \r\n              &:hover {\r\n                border-color: var(--bs-secondary, var(--app-cta-btn-secondary-border-color));\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n  \r\n      &.text-dark {\r\n        color: var(--app-cta-text-dark);\r\n        \r\n        .app-cta3-buttons {\r\n          .app-cta3-btn {\r\n            &:first-child {\r\n              color: var(--app-cta-text-bright);\r\n  \r\n              &:hover {\r\n                color: var(--bs-primary, var(--bs-btn-color-fallback-app-cta));\r\n              }\r\n            }\r\n  \r\n            color: var(--app-cta-text-dark);            \r\n          }\r\n        }\r\n      }\r\n    }\r\n  }","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}