// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "PresentationSettings.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class PresentationSettings
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v17.06.02
// App/Edition: Call To Action/
// User:        2sic Web-Developer
// When:        2024-04-08 07:15:28Z
using ToSic.Sxc.Adam;

namespace AppCode.Data
{
  // This is a generated class for PresentationSettings 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// PresentationSettings data. <br/>
  /// Generated 2024-04-08 07:15:28Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.BackgroundImage`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class PresentationSettings: AutoGenerated.ZagPresentationSettings
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.PresentationSettings in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZagPresentationSettings: Custom.Data.CustomItem
  {
    /// <summary>
    /// BackgroundImage as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("BackgroundImage")
    /// </summary>
    public string BackgroundImage => _item.Url("BackgroundImage");

    /// <summary>
    /// Get the file object for BackgroundImage - or null if it's empty or not referencing a file.
    /// </summary>
    public IFile BackgroundImageFile => _item.File("BackgroundImage");

    /// <summary>
    /// Get the folder object for BackgroundImage.
    /// </summary>
    public IFolder BackgroundImageFolder => _item.Folder("BackgroundImage");

    /// <summary>
    /// BackgroundType as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("BackgroundType", scrubHtml: true) etc.
    /// </summary>
    public string BackgroundType => _item.String("BackgroundType", fallback: "");

    /// <summary>
    /// HeadingType as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("HeadingType", scrubHtml: true) etc.
    /// </summary>
    public string HeadingType => _item.String("HeadingType", fallback: "");

    /// <summary>
    /// ShowImageOverlay as bool. <br/>
    /// To get nullable use .Get("ShowImageOverlay") as bool?;
    /// </summary>
    public bool ShowImageOverlay => _item.Bool("ShowImageOverlay");

    /// <summary>
    /// TextAlignment as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("TextAlignment", scrubHtml: true) etc.
    /// </summary>
    public string TextAlignment => _item.String("TextAlignment", fallback: "");

    /// <summary>
    /// TextColor as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("TextColor", scrubHtml: true) etc.
    /// </summary>
    public string TextColor => _item.String("TextColor", fallback: "");

    /// <summary>
    /// TextVAlignment as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("TextVAlignment", scrubHtml: true) etc.
    /// </summary>
    public string TextVAlignment => _item.String("TextVAlignment", fallback: "");
  }
}